(library (yuniexternal alexpander)
         (export
           yuniexternal-alexpander-get-init
           yuniexternal-alexpander-newenv
           yuniexternal-alexpander-expand-top-level-forms!)
         (import (yuni scheme))

(define x%%yuniloader-alexpander-init #f)
(define x%%yuniloader-alexpander-newenv #f)
(define x%%yuniloader-alexpander-expand-top-level-forms! #f)

(define (yuniexternal-alexpander-get-init)
  x%%yuniloader-alexpander-init)

(define (yuniexternal-alexpander-newenv)
  (x%%yuniloader-alexpander-newenv))

(define (yuniexternal-alexpander-expand-top-level-forms! forms mstore)
  (x%%yuniloader-alexpander-expand-top-level-forms! forms mstore))

(let (;; 0: $$yunifake-inject-primitive/raw
      ;; 1: $$yunifake-inject-primitive
      ;; 2: $$yunifake-inject
      ;; 3: $$yunifake-expand-expr
      ;; 4: $$yunifake-expand-body
      ;; 5: $$yunifake-bind
      ;; 6: $$yunifake-bind/body
      ;; 7: $$yunifake-inject-definition
      ($$yunifake-hook0 ;;RENAMED
        (lambda
          (;; callbacks
           expand-expr    ;; (expand-expr sexp id-n env store loc-n)
           expand-subexpr
           expand-body    ;; (expand-body sexps id-n ...) -- body sequence
           ek             ;; (expression expr)
           dk             ;; (definition builtin sexp id-n env store loc-n)
           again          ;; (again sexp id-n store loc-n)
           unwrap-vecs    ;; (unwrap-vecs sexp) -- quote
           sid-id         ;; (sid-id sid)
           intloc->var    ;; (intloc->var loc-n int)
           extend-env     ;; (extend-env env id location)
           extend-store   ;; (extend-store store loc val)
           ;; Input
           sexp 
           ;; current context
           id-n env store loc-n)
          (let ((code (cadr sexp)))
           (case code
             ((0) ;; (inject-primitive/raw CODE sym body ...)
              (let ((sym (unwrap-vecs (caddr sexp)))
                    (body* (cdddr sexp)))
                (ek (cons sym body*))))
             ((1) ;; (inject-primitive CODE sym body)
              (let ((sym (unwrap-vecs (caddr sexp)))
                    (body* (expand-subexpr (cadddr sexp))))
                (ek (cons sym body*))))
             ((2) ;; (inject CODE id body ...)
              (let ((top (caddr sexp))
                    (body (cdddr sexp)))
                (again (cons top body) id-n store loc-n)))
             #|
             ((3) ;; (expand-expr CODE body)
              (let ((body (caddr sexp)))
                (expand-subexpr body)))
             ((4) ;; (expand-body CODE body ...)
              (let ((body (cddr sexp)))
                (expand-body body id-n env store loc-n #f (lambda (x) x) #f #f #f)))
             |#
             ((5 6) ;; (bind CODE cb CB-ARG frms body ...) 
              ;;   => (cb CB-ARG (frms ...) body ...)
              (let ((frms* (caddr (cddr sexp)))
                    (body (cdddr (cddr sexp)))
                    (cb (caddr sexp))
                    (cb-arg (cadddr sexp))
                    (do-again (lambda (expr) (again expr id-n store loc-n))))
                ;(pp (list 'Body: body))
                (let loop ((frm frms*)
                           (rout '())
                           (env env) (store store) (loc-n loc-n))
                  (if (pair? frm)
                    (let ((v (car frm)))
                     (let* ((var (intloc->var loc-n v))
                            (env (extend-env env (sid-id v) loc-n))
                            (store (extend-store store loc-n var)))
                       (loop (cdr frm) (cons var rout) env store (+ loc-n 1))))
                    (again
                      (cons cb
                            (cons (expand-subexpr cb-arg)
                                  (list (reverse rout) 
                                        (case code
                                          ((5)
                                           (expand-expr body id-n env store loc-n))
                                          ((6)
                                           (expand-body body id-n env store loc-n #f 
                                                        (lambda (x) x) #f #f #f))))))
                      id-n store loc-n)))))
             ((7) ;; (inject-definition CODE nam frm)
              (dk '$$yunifake-define1 
                  (cons '$$yunifake-define1 (cddr sexp))
                  id-n env store loc-n ))
             (else
               (error "Unknown object for $$yunifake-hook" sexp)))))))
  ;;
  @YUNI_ALEXPANDER_SOURCE@

  ;;
  (set! x%%yuniloader-alexpander-init 
    %%yuniloader-alexpander-init)
  (set! x%%yuniloader-alexpander-newenv 
    %%yuniloader-alexpander-newenv)
  (set! x%%yuniloader-alexpander-expand-top-level-forms! 
    %%yuniloader-alexpander-expand-top-level-forms!))
         
)
